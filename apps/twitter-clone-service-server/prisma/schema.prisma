datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Follow {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Tweet {
  comment   Comment?  @relation(name: "CommentOnTweets", fields: [commentId], references: [id])
  commentId String?
  comments  Comment[] @relation(name: "CommentsOnTweet")
  content   String?
  createdAt DateTime  @default(now())
  id        String    @id @default(cuid())
  like      Like?     @relation(name: "LikeOnTweets", fields: [likeId], references: [id])
  likeId    String?
  likes     Like[]    @relation(name: "LikesOnTweet")
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Like {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  tweet     Tweet?   @relation(name: "LikesOnTweet", fields: [tweetId], references: [id])
  tweetId   String?
  tweets    Tweet[]  @relation(name: "LikeOnTweets")
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Comment {
  content   String?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  tweet     Tweet?   @relation(name: "CommentsOnTweet", fields: [tweetId], references: [id])
  tweetId   String?
  tweets    Tweet[]  @relation(name: "CommentOnTweets")
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model User {
  comments  Comment[]
  createdAt DateTime  @default(now())
  email     String?   @unique
  firstName String?
  follows   Follow[]
  id        String    @id @default(cuid())
  lastName  String?
  likes     Like[]
  password  String
  roles     Json
  tweets    Tweet[]
  updatedAt DateTime  @updatedAt
  username  String    @unique
}
