/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LikeService } from "../like.service";
import { LikeCreateInput } from "./LikeCreateInput";
import { Like } from "./Like";
import { LikeFindManyArgs } from "./LikeFindManyArgs";
import { LikeWhereUniqueInput } from "./LikeWhereUniqueInput";
import { LikeUpdateInput } from "./LikeUpdateInput";
import { TweetFindManyArgs } from "../../tweet/base/TweetFindManyArgs";
import { Tweet } from "../../tweet/base/Tweet";
import { TweetWhereUniqueInput } from "../../tweet/base/TweetWhereUniqueInput";

export class LikeControllerBase {
  constructor(protected readonly service: LikeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Like })
  async createLike(@common.Body() data: LikeCreateInput): Promise<Like> {
    return await this.service.createLike({
      data: {
        ...data,

        tweet: data.tweet
          ? {
              connect: data.tweet,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        tweet: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Like] })
  @ApiNestedQuery(LikeFindManyArgs)
  async likes(@common.Req() request: Request): Promise<Like[]> {
    const args = plainToClass(LikeFindManyArgs, request.query);
    return this.service.likes({
      ...args,
      select: {
        createdAt: true,
        id: true,

        tweet: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Like })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async like(
    @common.Param() params: LikeWhereUniqueInput
  ): Promise<Like | null> {
    const result = await this.service.like({
      where: params,
      select: {
        createdAt: true,
        id: true,

        tweet: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Like })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLike(
    @common.Param() params: LikeWhereUniqueInput,
    @common.Body() data: LikeUpdateInput
  ): Promise<Like | null> {
    try {
      return await this.service.updateLike({
        where: params,
        data: {
          ...data,

          tweet: data.tweet
            ? {
                connect: data.tweet,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          tweet: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Like })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLike(
    @common.Param() params: LikeWhereUniqueInput
  ): Promise<Like | null> {
    try {
      return await this.service.deleteLike({
        where: params,
        select: {
          createdAt: true,
          id: true,

          tweet: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tweets")
  @ApiNestedQuery(TweetFindManyArgs)
  async findTweets(
    @common.Req() request: Request,
    @common.Param() params: LikeWhereUniqueInput
  ): Promise<Tweet[]> {
    const query = plainToClass(TweetFindManyArgs, request.query);
    const results = await this.service.findTweets(params.id, {
      ...query,
      select: {
        comment: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,

        like: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tweets")
  async connectTweets(
    @common.Param() params: LikeWhereUniqueInput,
    @common.Body() body: TweetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tweets: {
        connect: body,
      },
    };
    await this.service.updateLike({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tweets")
  async updateTweets(
    @common.Param() params: LikeWhereUniqueInput,
    @common.Body() body: TweetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tweets: {
        set: body,
      },
    };
    await this.service.updateLike({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tweets")
  async disconnectTweets(
    @common.Param() params: LikeWhereUniqueInput,
    @common.Body() body: TweetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tweets: {
        disconnect: body,
      },
    };
    await this.service.updateLike({
      where: params,
      data,
      select: { id: true },
    });
  }
}
